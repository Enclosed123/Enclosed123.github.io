[{"title":"Vue相关问题(一)","date":"2019-12-26T09:53:10.202Z","path":"2019/12/26/Vue相关问题(一)/","text":"1、说说你对 SPA 单页面的理解，它的优缺点分别是什么？SPA（ single-page application ）仅在 Web 页面初始化时加载相应的 HTML、JavaScript 和 CSS。一旦页面加载完成，SPA 不会因为用户的操作而进行页面的重新加载或跳转；取而代之的是利用路由机制实现 HTML 内容的变换，UI 与用户的交互，避免页面的重新加载。 优点： 用户体验好、快，内容的改变不需要重新加载整个页面，避免了不必要的跳转和重复渲染； 基于上面一点，SPA 相对对服务器压力小； 前后端职责分离，架构清晰，前端进行交互逻辑，后端负责数据处理； 缺点： 初次加载耗时多：为实现单页 Web 应用功能及显示效果，需要在加载页面的时候将 JavaScript、CSS 统一加载，部分页面按需加载； 前进后退路由管理：由于单页应用在一个页面中显示所有的内容，所以不能使用浏览器的前进后退功能，所有的页面切换需要自己建立堆栈管理； SEO 难度较大：由于所有的内容都在一个页面中动态替换显示，所以在 SEO 上其有着天然的弱势。 2、v-show 与 v-if 有什么区别？v-if 是真正的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建；也是惰性的：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。 v-show 就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 的 “display” 属性进行切换。 所以，v-if 适用于在运行时很少改变条件，不需要频繁切换条件的场景；v-show 则适用于需要非常频繁切换条件的场景。 3、Class 与 Style 如何动态绑定？Class 可以通过对象语法和数组语法进行动态绑定： 对象语法： 123456&lt;div v-bind:class&#x3D;&quot;&#123; active: isActive, &#39;text-danger&#39;: hasError &#125;&quot;&gt;&lt;&#x2F;div&gt;data: &#123; isActive: true, hasError: false&#125; 数组语法： 123456&lt;div v-bind:class&#x3D;&quot;[isActive ? activeClass : &#39;&#39;, errorClass]&quot;&gt;&lt;&#x2F;div&gt;data: &#123; activeClass: &#39;active&#39;, errorClass: &#39;text-danger&#39;&#125; Style 也可以通过对象语法和数组语法进行动态绑定： 对象语法： 123456&lt;div v-bind:style&#x3D;&quot;&#123; color: activeColor, fontSize: fontSize + &#39;px&#39; &#125;&quot;&gt;&lt;&#x2F;div&gt;data: &#123; activeColor: &#39;red&#39;, fontSize: 30&#125; 数组语法： 12345678910&lt;div v-bind:style&#x3D;&quot;[styleColor, styleSize]&quot;&gt;&lt;&#x2F;div&gt;data: &#123; styleColor: &#123; color: &#39;red&#39; &#125;, styleSize:&#123; fontSize:&#39;23px&#39; &#125;&#125; 4、怎样理解 Vue 的单向数据流？所有的 prop 都使得其父子 prop 之间形成了一个单向下行绑定：父级 prop 的更新会向下流动到子组件中，但是反过来则不行。这样会防止从子组件意外改变父级组件的状态，从而导致你的应用的数据流向难以理解。 额外的，每次父级组件发生更新时，子组件中所有的 prop 都将会刷新为最新的值。这意味着你不应该在一个子组件内部改变 prop。如果你这样做了，Vue 会在浏览器的控制台中发出警告。子组件想修改时，只能通过 $emit 派发一个自定义事件，父组件接收到后，由父组件修改。 有两种常见的试图改变一个 prop 的情形 : 这个 prop 用来传递一个初始值；这个子组件接下来希望将其作为一个本地的 prop 数据来使用。 在这种情况下，最好定义一个本地的 data 属性并将这个 prop 用作其初始值： 123456props: [&#39;initialCounter&#39;],data: function () &#123; return &#123; counter: this.initialCounter &#125;&#125; 这个 prop 以一种原始的值传入且需要进行转换。 在这种情况下，最好使用这个 prop 的值来定义一个计算属性 123456props: [&#39;size&#39;],computed: &#123; normalizedSize: function () &#123; return this.size.trim().toLowerCase() &#125;&#125; 5、computed 和 watch 的区别和运用的场景？computed： 是计算属性，依赖其它属性值，并且 computed 的值有缓存，只有它依赖的属性值发生改变，下一次获取 computed 的值时才会重新计算 computed 的值； watch： 更多的是「观察」的作用，类似于某些数据的监听回调 ，每当监听的数据变化时都会执行回调进行后续操作； 运用场景： 当我们需要进行数值计算，并且依赖于其它数据时，应该使用 computed，因为可以利用 computed 的缓存特性，避免每次获取值时，都要重新计算； 当我们需要在数据变化时执行异步或开销较大的操作时，应该使用 watch，使用 watch 选项允许我们执行异步操作 ( 访问一个 API )，限制我们执行该操作的频率，并在我们得到最终结果前，设置中间状态。这些都是计算属性无法做到的。 6、直接给一个数组项赋值，Vue 能检测到变化吗？由于 JavaScript 的限制，Vue 不能检测到以下数组的变动： 当你利用索引直接设置一个数组项时，例如：vm.items[indexOfItem] = newValue 当你修改数组的长度时，例如：vm.items.length = newLength 为了解决第一个问题，Vue 提供了以下操作方法： 123456&#x2F;&#x2F; Vue.setVue.set(vm.items, indexOfItem, newValue)&#x2F;&#x2F; vm.$set，Vue.set的一个别名vm.$set(vm.items, indexOfItem, newValue)&#x2F;&#x2F; Array.prototype.splicevm.items.splice(indexOfItem, 1, newValue) 为了解决第二个问题，Vue 提供了以下操作方法： 12&#x2F;&#x2F; Array.prototype.splicevm.items.splice(newLength) 7、谈谈你对 Vue 生命周期的理解？（1）生命周期是什么？ Vue 实例有一个完整的生命周期，也就是从开始创建、初始化数据、编译模版、挂载 Dom -&gt; 渲染、更新 -&gt; 渲染、卸载等一系列过程，我们称这是 Vue 的生命周期。 （2）各个生命周期的作用 生命周期 描述 beforeCreate 组件实例被创建之初，组件的属性生效之前 created 组件实例已经完全创建，属性也绑定，但真实 dom 还没有生成，$el 还不可用 beforeMount 在挂载开始之前被调用：相关的 render 函数首次被调用 mounted el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子 beforeUpdate 组件数据更新之前调用，发生在虚拟 DOM 打补丁之前 update 组件数据更新之后 activited keep-alive 专属，组件被激活时调用 deadctivated keep-alive 专属，组件被销毁时调用 beforeDestory 组件销毁前调用 destoryed 组件销毁后调用 （3）生命周期示意图 ![1.png](data:image/svg+xml;utf8,) 8、Vue 的父组件和子组件生命周期钩子函数执行顺序？Vue 的父组件和子组件生命周期钩子函数执行顺序可以归类为以下 4 部分： 加载渲染过程 父 beforeCreate -&gt; 父 created -&gt; 父 beforeMount -&gt; 子 beforeCreate -&gt; 子 created -&gt; 子 beforeMount -&gt; 子 mounted -&gt; 父 mounted 子组件更新过程 父 beforeUpdate -&gt; 子 beforeUpdate -&gt; 子 updated -&gt; 父 updated 父组件更新过程 父 beforeUpdate -&gt; 父 updated 销毁过程 父 beforeDestroy -&gt; 子 beforeDestroy -&gt; 子 destroyed -&gt; 父 destroyed 9、在哪个生命周期内调用异步请求？可以在钩子函数 created、beforeMount、mounted 中进行调用，因为在这三个钩子函数中，data 已经创建，可以将服务端端返回的数据进行赋值。但是本人推荐在 created 钩子函数中调用异步请求，因为在 created 钩子函数中调用异步请求有以下优点： 能更快获取到服务端数据，减少页面 loading 时间； ssr 不支持 beforeMount 、mounted 钩子函数，所以放在 created 中有助于一致性； 10、在什么阶段才能访问操作DOM？在钩子函数 mounted 被调用前，Vue 已经将编译好的模板挂载到页面上，所以在 mounted 中可以访问操作 DOM。vue 具体的生命周期示意图可以参见如下，理解了整个生命周期各个阶段的操作，关于生命周期相关的面试题就难不倒你了。 ![1.png](data:image/svg+xml;utf8,) 11、父组件可以监听到子组件的生命周期吗？比如有父组件 Parent 和子组件 Child，如果父组件监听到子组件挂载 mounted 就做一些逻辑处理，可以通过以下写法实现： 1234567&#x2F;&#x2F; Parent.vue&lt;Child @mounted&#x3D;&quot;doSomething&quot;&#x2F;&gt; &#x2F;&#x2F; Child.vuemounted() &#123; this.$emit(&quot;mounted&quot;);&#125; 以上需要手动通过 $emit 触发父组件的事件，更简单的方式可以在父组件引用子组件时通过 @hook 来监听即可，如下所示： 123456789101112131415&#x2F;&#x2F; Parent.vue&lt;Child @hook:mounted&#x3D;&quot;doSomething&quot; &gt;&lt;&#x2F;Child&gt;doSomething() &#123; console.log(&#39;父组件监听到 mounted 钩子函数 ...&#39;);&#125;, &#x2F;&#x2F; Child.vuemounted()&#123; console.log(&#39;子组件触发 mounted 钩子函数 ...&#39;);&#125;, &#x2F;&#x2F; 以上输出顺序为：&#x2F;&#x2F; 子组件触发 mounted 钩子函数 ...&#x2F;&#x2F; 父组件监听到 mounted 钩子函数 ... 当然 @hook 方法不仅仅是可以监听 mounted，其它的生命周期事件，例如：created，updated 等都可以监听。 12、谈谈你对 keep-alive 的了解？keep-alive 是 Vue 内置的一个组件，可以使被包含的组件保留状态，避免重新渲染 ，其有以下特性： 一般结合路由和动态组件一起使用，用于缓存组件； 提供 include 和 exclude 属性，两者都支持字符串或正则表达式， include 表示只有名称匹配的组件会被缓存，exclude 表示任何名称匹配的组件都不会被缓存 ，其中 exclude 的优先级比 include 高； 对应两个钩子函数 activated 和 deactivated ，当组件被激活时，触发钩子函数 activated，当组件被移除时，触发钩子函数 deactivated。 13、组件中 data 为什么是一个函数？ 为什么组件中的 data 必须是一个函数，然后 return 一个对象，而 new Vue 实例里，data 可以直接是一个对象？ 123456789101112131415&#x2F;&#x2F; datadata() &#123; return &#123; message: &quot;子组件&quot;, childName:this.name &#125;&#125;&#x2F;&#x2F; new Vuenew Vue(&#123; el: &#39;#app&#39;, router, template: &#39;&lt;App&#x2F;&gt;&#39;, components: &#123;App&#125;&#125;) 因为组件是用来复用的，且 JS 里对象是引用关系，如果组件中 data 是一个对象，那么这样作用域没有隔离，子组件中的 data 属性值会相互影响，如果组件中 data 选项是一个函数，那么每个实例可以维护一份被返回对象的独立的拷贝，组件实例之间的 data 属性值不会互相影响；而 new Vue 的实例，是不会被复用的，因此不存在引用对象的问题。 14、v-model 的原理？我们在 vue 项目中主要使用 v-model 指令在表单 input、textarea、select 等元素上创建双向数据绑定，我们知道 v-model 本质上不过是语法糖，v-model 在内部为不同的输入元素使用不同的属性并抛出不同的事件： text 和 textarea 元素使用 value 属性和 input 事件； checkbox 和 radio 使用 checked 属性和 change 事件； select 字段将 value 作为 prop 并将 change 作为事件。 以 input 表单元素为例： 12345&lt;input v-model&#x3D;&#39;something&#39;&gt; 相当于&lt;input v-bind:value&#x3D;&quot;something&quot; v-on:input&#x3D;&quot;something &#x3D; $event.target.value&quot;&gt; 如果在自定义组件中，v-model 默认会利用名为 value 的 prop 和名为 input 的事件，如下所示： 1234567891011121314父组件：&lt;ModelChild v-model&#x3D;&quot;message&quot;&gt;&lt;&#x2F;ModelChild&gt;子组件：&lt;div&gt;&#123;&#123;value&#125;&#125;&lt;&#x2F;div&gt;props:&#123; value: String&#125;,methods: &#123; test1()&#123; this.$emit(&#39;input&#39;, &#39;小红&#39;) &#125;,&#125;, 15、Vue 组件间通信有哪几种方式？Vue 组件间通信是面试常考的知识点之一，这题有点类似于开放题，你回答出越多方法当然越加分，表明你对 Vue 掌握的越熟练。Vue 组件间通信只要指以下 3 类通信：父子组件通信、隔代组件通信、兄弟组件通信，下面我们分别介绍每种通信方式且会说明此种方法可适用于哪类组件间通信。 （1）props / $emit 适用 父子组件通信 这种方法是 Vue 组件的基础，相信大部分同学耳闻能详，所以此处就不举例展开介绍。 （2）ref 与 $parent / $children 适用 父子组件通信 ref：如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素；如果用在子组件上，引用就指向组件实例 $parent / $children：访问父 / 子实例 （3）EventBus （$emit / $on） 适用于 父子、隔代、兄弟组件通信 这种方法通过一个空的 Vue 实例作为中央事件总线（事件中心），用它来触发事件和监听事件，从而实现任何组件间的通信，包括父子、隔代、兄弟组件。 （4）$attrs/$listeners 适用于 隔代组件通信 $attrs：包含了父作用域中不被 prop 所识别 (且获取) 的特性绑定 ( class 和 style 除外 )。当一个组件没有声明任何 prop 时，这里会包含所有父作用域的绑定 ( class 和 style 除外 )，并且可以通过 v-bind=&quot;$attrs&quot; 传入内部组件。通常配合 inheritAttrs 选项一起使用。 $listeners：包含了父作用域中的 (不含 .native 修饰器的) v-on 事件监听器。它可以通过 v-on=&quot;$listeners&quot; 传入内部组件 （5）provide / inject 适用于 隔代组件通信 祖先组件中通过 provider 来提供变量，然后在子孙组件中通过 inject 来注入变量。 provide / inject API 主要解决了跨级组件间的通信问题，不过它的使用场景，主要是子组件获取上级组件的状态，跨级组件间建立了一种主动提供与依赖注入的关系。 （6）Vuex 适用于 父子、隔代、兄弟组件通信 Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。每一个 Vuex 应用的核心就是 store（仓库）。“store” 基本上就是一个容器，它包含着你的应用中大部分的状态 ( state )。 Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。 改变 store 中的状态的唯一途径就是显式地提交 (commit) mutation。这样使得我们可以方便地跟踪每一个状态的变化。 16、你使用过 Vuex 吗？Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。每一个 Vuex 应用的核心就是 store（仓库）。“store” 基本上就是一个容器，它包含着你的应用中大部分的状态 ( state )。 （1）Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。 （2）改变 store 中的状态的唯一途径就是显式地提交 (commit) mutation。这样使得我们可以方便地跟踪每一个状态的变化。 主要包括以下几个模块： State：定义了应用状态的数据结构，可以在这里设置默认的初始状态。 Getter：允许组件从 Store 中获取数据，mapGetters 辅助函数仅仅是将 store 中的 getter 映射到局部计算属性。 Mutation：是唯一更改 store 中状态的方法，且必须是同步函数。 Action：用于提交 mutation，而不是直接变更状态，可以包含任意异步操作。 Module：允许将单一的 Store 拆分为多个 store 且同时保存在单一的状态树中。 17、使用过 Vue SSR 吗？说说 SSR？ Vue.js 是构建客户端应用程序的框架。默认情况下，可以在浏览器中输出 Vue 组件，进行生成 DOM 和操作 DOM。然而，也可以将同一个组件渲染为服务端的 HTML 字符串，将它们直接发送到浏览器，最后将这些静态标记”激活”为客户端上完全可交互的应用程序。 即：SSR大致的意思就是vue在客户端将标签渲染成的整个 html 片段的工作在服务端完成，服务端形成的html 片段直接返回给客户端这个过程就叫做服务端渲染。 服务端渲染 SSR 的优缺点如下： （1）服务端渲染的优点： 更好的 SEO： 因为 SPA 页面的内容是通过 Ajax 获取，而搜索引擎爬取工具并不会等待 Ajax 异步完成后再抓取页面内容，所以在 SPA 中是抓取不到页面通过 Ajax 获取到的内容；而 SSR 是直接由服务端返回已经渲染好的页面（数据已经包含在页面中），所以搜索引擎爬取工具可以抓取渲染好的页面； 更快的内容到达时间（首屏加载更快）： SPA 会等待所有 Vue 编译后的 js 文件都下载完成后，才开始进行页面的渲染，文件下载等需要一定的时间等，所以首屏渲染需要一定的时间；SSR 直接由服务端渲染好页面直接返回显示，无需等待下载 js 文件及再去渲染等，所以 SSR 有更快的内容到达时间； （2) 服务端渲染的缺点： 更多的开发条件限制： 例如服务端渲染只支持 beforCreate 和 created 两个钩子函数，这会导致一些外部扩展库需要特殊处理，才能在服务端渲染应用程序中运行；并且与可以部署在任何静态文件服务器上的完全静态单页面应用程序 SPA 不同，服务端渲染应用程序，需要处于 Node.js server 运行环境； 更多的服务器负载：在 Node.js 中渲染完整的应用程序，显然会比仅仅提供静态文件的 server 更加大量占用CPU 资源 (CPU-intensive - CPU 密集)，因此如果你预料在高流量环境 ( high traffic ) 下使用，请准备相应的服务器负载，并明智地采用缓存策略。 如果没有 SSR 开发经验的同学，可以参考本文作者的另一篇 SSR 的实践文章《Vue SSR 踩坑之旅》，里面 SSR 项目搭建以及附有项目源码。 18、vue-router 路由模式有几种？vue-router 有 3 种路由模式：hash、history、abstract，对应的源码如下所示： 123456789101112131415switch (mode) &#123; case &#39;history&#39;: this.history &#x3D; new HTML5History(this, options.base) break case &#39;hash&#39;: this.history &#x3D; new HashHistory(this, options.base, this.fallback) break case &#39;abstract&#39;: this.history &#x3D; new AbstractHistory(this, options.base) break default: if (process.env.NODE_ENV !&#x3D;&#x3D; &#39;production&#39;) &#123; assert(false, &#96;invalid mode: $&#123;mode&#125;&#96;) &#125;&#125; 其中，3 种路由模式的说明如下： hash: 使用 URL hash 值来作路由。支持所有浏览器，包括不支持 HTML5 History Api 的浏览器； history : 依赖 HTML5 History API 和服务器配置。具体可以查看 HTML5 History 模式； abstract : 支持所有 JavaScript 运行环境，如 Node.js 服务器端。如果发现没有浏览器的 API，路由会自动强制进入这个模式. 19、能说下 vue-router 中常用的 hash 和 history 路由模式实现原理吗？（1）hash 模式的实现原理 早期的前端路由的实现就是基于 location.hash 来实现的。其实现原理很简单，location.hash 的值就是 URL 中 # 后面的内容。比如下面这个网站，它的 location.hash 的值为 ‘#search’： 1https:&#x2F;&#x2F;www.word.com#search hash 路由模式的实现主要是基于下面几个特性： URL 中 hash 值只是客户端的一种状态，也就是说当向服务器端发出请求时，hash 部分不会被发送； hash 值的改变，都会在浏览器的访问历史中增加一个记录。因此我们能通过浏览器的回退、前进按钮控制hash 的切换； 可以通过 a 标签，并设置 href 属性，当用户点击这个标签后，URL 的 hash 值会发生改变；或者使用 JavaScript 来对 loaction.hash 进行赋值，改变 URL 的 hash 值； 我们可以使用 hashchange 事件来监听 hash 值的变化，从而对页面进行跳转（渲染）。 （2）history 模式的实现原理 HTML5 提供了 History API 来实现 URL 的变化。其中做最主要的 API 有以下两个：history.pushState() 和 history.repalceState()。这两个 API 可以在不进行刷新的情况下，操作浏览器的历史纪录。唯一不同的是，前者是新增一个历史记录，后者是直接替换当前的历史记录，如下所示： 12window.history.pushState(null, null, path);window.history.replaceState(null, null, path); history 路由模式的实现主要基于存在下面几个特性： pushState 和 repalceState 两个 API 来操作实现 URL 的变化 ； 我们可以使用 popstate 事件来监听 url 的变化，从而对页面进行跳转（渲染）； history.pushState() 或 history.replaceState() 不会触发 popstate 事件，这时我们需要手动触发页面跳转（渲染）。 20、什么是 MVVM？Model–View–ViewModel （MVVM） 是一个软件架构设计模式，由微软 WPF 和 Silverlight 的架构师 Ken Cooper 和 Ted Peters 开发，是一种简化用户界面的事件驱动编程方式。由 John Gossman（同样也是 WPF 和 Silverlight 的架构师）于2005年在他的博客上发表 MVVM 源自于经典的 Model–View–Controller（MVC）模式 ，MVVM 的出现促进了前端开发与后端业务逻辑的分离，极大地提高了前端开发效率，MVVM 的核心是 ViewModel 层，它就像是一个中转站（value converter），负责转换 Model 中的数据对象来让数据变得更容易管理和使用，该层向上与视图层进行双向数据绑定，向下与 Model 层通过接口请求进行数据交互，起呈上启下作用。如下图所示： （1）View 层 View 是视图层，也就是用户界面。前端主要由 HTML 和 CSS 来构建 。 （2）Model 层 Model 是指数据模型，泛指后端进行的各种业务逻辑处理和数据操控，对于前端来说就是后端提供的 api 接口。 （3）ViewModel 层 ViewModel 是由前端开发人员组织生成和维护的视图数据层。在这一层，前端开发者对从后端获取的 Model 数据进行转换处理，做二次封装，以生成符合 View 层使用预期的视图数据模型。需要注意的是 ViewModel 所封装出来的数据模型包括视图的状态和行为两部分，而 Model 层的数据模型是只包含状态的，比如页面的这一块展示什么，而页面加载进来时发生什么，点击这一块发生什么，这一块滚动时发生什么这些都属于视图行为（交互），视图状态和行为都封装在了 ViewModel 里。这样的封装使得 ViewModel 可以完整地去描述 View 层。 MVVM 框架实现了双向绑定，这样 ViewModel 的内容会实时展现在 View 层，前端开发者再也不必低效又麻烦地通过操纵 DOM 去更新视图，MVVM 框架已经把最脏最累的一块做好了，我们开发者只需要处理和维护 ViewModel，更新数据视图就会自动得到相应更新。这样 View 层展现的不是 Model 层的数据，而是 ViewModel 的数据，由 ViewModel 负责与 Model 层交互，这就完全解耦了 View 层和 Model 层，这个解耦是至关重要的，它是前后端分离方案实施的重要一环。 我们以下通过一个 Vue 实例来说明 MVVM 的具体实现，有 Vue 开发经验的同学应该一目了然： （1）View 层 1234&lt;div id&#x3D;&quot;app&quot;&gt; &lt;p&gt;&#123;&#123;message&#125;&#125;&lt;&#x2F;p&gt; &lt;button v-on:click&#x3D;&quot;showMessage()&quot;&gt;Click me&lt;&#x2F;button&gt;&lt;&#x2F;div&gt; （2）ViewModel 层 12345678910111213141516171819202122var app &#x3D; new Vue(&#123; el: &#39;#app&#39;, data: &#123; &#x2F;&#x2F; 用于描述视图状态 message: &#39;Hello Vue!&#39;, &#125;, methods: &#123; &#x2F;&#x2F; 用于描述视图行为 showMessage()&#123; let vm &#x3D; this; alert(vm.message); &#125; &#125;, created()&#123; let vm &#x3D; this; &#x2F;&#x2F; Ajax 获取 Model 层的数据 ajax(&#123; url: &#39;&#x2F;your&#x2F;server&#x2F;data&#x2F;api&#39;, success(res)&#123; vm.message &#x3D; res; &#125; &#125;); &#125;&#125;) （3） Model 层 12345678&#123; &quot;url&quot;: &quot;&#x2F;your&#x2F;server&#x2F;data&#x2F;api&quot;, &quot;res&quot;: &#123; &quot;success&quot;: true, &quot;name&quot;: &quot;IoveC&quot;, &quot;domain&quot;: &quot;www.cnblogs.com&quot; &#125;&#125; 21、Vue 是如何实现数据双向绑定的？即： 输入框内容变化时，Data 中的数据同步变化。即 View =&gt; Data 的变化。 Data 中的数据变化时，文本节点的内容同步变化。即 Data =&gt; View 的变化。 其中，View 变化更新 Data ，可以通过事件监听的方式来实现，所以 Vue 的数据双向绑定的工作主要是如何根据 Data 变化更新 View。 Vue 主要通过以下 4 个步骤来实现数据双向绑定的： 实现一个监听器 Observer：对数据对象进行遍历，包括子属性对象的属性，利用 Object.defineProperty() 对属性都加上 setter 和 getter。这样的话，给这个对象的某个值赋值，就会触发 setter，那么就能监听到了数据变化。 实现一个解析器 Compile：解析 Vue 模板指令，将模板中的变量都替换成数据，然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数，添加监听数据的订阅者，一旦数据有变动，收到通知，调用更新函数进行数据更新。 实现一个订阅者 Watcher：Watcher 订阅者是 Observer 和 Compile 之间通信的桥梁 ，主要的任务是订阅 Observer 中的属性值变化的消息，当收到属性值变化的消息时，触发解析器 Compile 中对应的更新函数。 实现一个订阅器 Dep：订阅器采用 发布-订阅 设计模式，用来收集订阅者 Watcher，对监听器 Observer 和 订阅者 Watcher 进行统一管理。 22、Vue 框架怎么实现对象和数组的监听？如果被问到 Vue 怎么实现数据双向绑定，大家肯定都会回答 通过 Object.defineProperty() 对数据进行劫持，但是 Object.defineProperty() 只能对属性进行数据劫持，不能对整个对象进行劫持，同理无法对数组进行劫持，但是我们在使用 Vue 框架中都知道，Vue 能检测到对象和数组（部分方法的操作）的变化，那它是怎么实现的呢？我们查看相关代码如下： 12345678910111213&#x2F;** * Observe a list of Array items. *&#x2F;observeArray (items: Array&lt;any&gt;) &#123; for (let i &#x3D; 0, l &#x3D; items.length; i &lt; l; i++) &#123; observe(items[i]) &#x2F;&#x2F; observe 功能为监测数据的变化 &#125;&#125;&#x2F;** * 对属性进行递归遍历 *&#x2F;let childOb &#x3D; !shallow &amp;&amp; observe(val) &#x2F;&#x2F; observe 功能为监测数据的变化 通过以上 Vue 源码部分查看，我们就能知道 Vue 框架是通过遍历数组 和递归遍历对象，从而达到利用 Object.defineProperty() 也能对对象和数组（部分方法的操作）进行监听。 23、Proxy 与 Object.defineProperty 优劣对比Proxy 的优势如下: Proxy 可以直接监听对象而非属性； Proxy 可以直接监听数组的变化； Proxy 有多达 13 种拦截方法,不限于 apply、ownKeys、deleteProperty、has 等等是 Object.defineProperty 不具备的； Proxy 返回的是一个新对象,我们可以只操作新的对象达到目的,而 Object.defineProperty 只能遍历对象属性直接修改； Proxy 作为新标准将受到浏览器厂商重点持续的性能优化，也就是传说中的新标准的性能红利； Object.defineProperty 的优势如下: 兼容性好，支持 IE9，而 Proxy 的存在浏览器兼容性问题,而且无法用 polyfill 磨平，因此 Vue 的作者才声明需要等到下个大版本( 3.0 )才能用 Proxy 重写。 24、Vue 怎么用 vm.$set() 解决对象新增属性不能响应的问题 ？受现代 JavaScript 的限制 ，Vue 无法检测到对象属性的添加或删除。由于 Vue 会在初始化实例时对属性执行 getter/setter 转化，所以属性必须在 data 对象上存在才能让 Vue 将它转换为响应式的。但是 Vue 提供了 Vue.set (object, propertyName, value) / vm.$set (object, propertyName, value) 来实现为对象添加响应式属性，那框架本身是如何实现的呢？ 12345678910111213141516171819202122232425export function set (target: Array&lt;any&gt; | Object, key: any, val: any): any &#123; &#x2F;&#x2F; target 为数组 if (Array.isArray(target) &amp;&amp; isValidArrayIndex(key)) &#123; &#x2F;&#x2F; 修改数组的长度, 避免索引&gt;数组长度导致splcie()执行有误 target.length &#x3D; Math.max(target.length, key) &#x2F;&#x2F; 利用数组的splice变异方法触发响应式 target.splice(key, 1, val) return val &#125; &#x2F;&#x2F; key 已经存在，直接修改属性值 if (key in target &amp;&amp; !(key in Object.prototype)) &#123; target[key] &#x3D; val return val &#125; const ob &#x3D; (target: any).__ob__ &#x2F;&#x2F; target 本身就不是响应式数据, 直接赋值 if (!ob) &#123; target[key] &#x3D; val return val &#125; &#x2F;&#x2F; 对属性进行响应式处理 defineReactive(ob.value, key, val) ob.dep.notify() return val&#125; 我们阅读以上源码可知，vm.$set 的实现原理是： 如果目标是数组，直接使用数组的 splice 方法触发相应式； 如果目标是对象，会先判读属性是否存在、对象是否是响应式，最终如果要对属性进行响应式处理，则是通过调用 defineReactive 方法进行响应式处理（ defineReactive 方法就是 Vue 在初始化对象时，给对象属性采用 Object.defineProperty 动态添加 getter 和 setter 的功能所调用的方法） 25、虚拟 DOM 的优缺点？优点： 保证性能下限： 框架的虚拟 DOM 需要适配任何上层 API 可能产生的操作，它的一些 DOM 操作的实现必须是普适的，所以它的性能并不是最优的；但是比起粗暴的 DOM 操作性能要好很多，因此框架的虚拟 DOM 至少可以保证在你不需要手动优化的情况下，依然可以提供还不错的性能，即保证性能的下限； 无需手动操作 DOM： 我们不再需要手动去操作 DOM，只需要写好 View-Model 的代码逻辑，框架会根据虚拟 DOM 和 数据双向绑定，帮我们以可预期的方式更新视图，极大提高我们的开发效率； 跨平台： 虚拟 DOM 本质上是 JavaScript 对象,而 DOM 与平台强相关，相比之下虚拟 DOM 可以进行更方便地跨平台操作，例如服务器渲染、weex 开发等等。 缺点: 无法进行极致优化： 虽然虚拟 DOM + 合理的优化，足以应对绝大部分应用的性能需求，但在一些性能要求极高的应用中虚拟 DOM 无法进行针对性的极致优化。 26、虚拟 DOM 实现原理？虚拟 DOM 的实现原理主要包括以下 3 部分： 用 JavaScript 对象模拟真实 DOM 树，对真实 DOM 进行抽象； diff 算法 — 比较两棵虚拟 DOM 树的差异； pach 算法 — 将两个虚拟 DOM 对象的差异应用到真正的 DOM 树。 27、Vue 中的 key 有什么作用？key 是为 Vue 中 vnode 的唯一标记，通过这个 key，我们的 diff 操作可以更准确、更快速。Vue 的 diff 过程可以概括为：oldCh 和 newCh 各有两个头尾的变量 oldStartIndex、oldEndIndex 和 newStartIndex、newEndIndex，它们会新节点和旧节点会进行两两对比，即一共有4种比较方式：newStartIndex 和oldStartIndex 、newEndIndex 和 oldEndIndex 、newStartIndex 和 oldEndIndex 、newEndIndex 和 oldStartIndex，如果以上 4 种比较都没匹配，如果设置了key，就会用 key 再进行比较，在比较的过程中，遍历会往中间靠，一旦 StartIdx &gt; EndIdx 表明 oldCh 和 newCh 至少有一个已经遍历完了，就会结束比较。 所以 Vue 中 key 的作用是：key 是为 Vue 中 vnode 的唯一标记，通过这个 key，我们的 diff 操作可以更准确、更快速 更准确：因为带 key 就不是就地复用了，在 sameNode 函数 a.key === b.key 对比中可以避免就地复用的情况。所以会更加准确。 更快速：利用 key 的唯一性生成 map 对象来获取对应节点，比遍历方式更快，源码如下： 123456789function createKeyToOldIdx (children, beginIdx, endIdx) &#123; let i, key const map &#x3D; &#123;&#125; for (i &#x3D; beginIdx; i &lt;&#x3D; endIdx; ++i) &#123; key &#x3D; children[i].key if (isDef(key)) map[key] &#x3D; i &#125; return map&#125; 28、你有对 Vue 项目进行哪些优化？（1）代码层面的优化 v-if 和 v-show 区分使用场景 computed 和 watch 区分使用场景 v-for 遍历必须为 item 添加 key，且避免同时使用 v-if 长列表性能优化 事件的销毁 图片资源懒加载 路由懒加载 第三方插件的按需引入 优化无限列表性能 服务端渲染 SSR or 预渲染 （2）Webpack 层面的优化 Webpack 对图片进行压缩 减少 ES6 转为 ES5 的冗余代码 提取公共代码 模板预编译 提取组件的 CSS 优化 SourceMap 构建结果输出分析 Vue 项目的编译优化 （3）基础的 Web 技术的优化 开启 gzip 压缩 浏览器缓存 CDN 的使用 使用 Chrome Performance 查找性能瓶颈 29、对于即将到来的 vue3.0 特性你有什么了解的吗？Vue 3.0 正走在发布的路上，Vue 3.0 的目标是让 Vue 核心变得更小、更快、更强大，因此 Vue 3.0 增加以下这些新特性： （1）监测机制的改变 3.0 将带来基于代理 Proxy 的 observer 实现，提供全语言覆盖的反应性跟踪。这消除了 Vue 2 当中基于 Object.defineProperty 的实现所存在的很多限制： 只能监测属性，不能监测对象 检测属性的添加和删除； 检测数组索引和长度的变更； 支持 Map、Set、WeakMap 和 WeakSet。 新的 observer 还提供了以下特性： 用于创建 observable 的公开 API。这为中小规模场景提供了简单轻量级的跨组件状态管理解决方案。 默认采用惰性观察。在 2.x 中，不管反应式数据有多大，都会在启动时被观察到。如果你的数据集很大，这可能会在应用启动时带来明显的开销。在 3.x 中，只观察用于渲染应用程序最初可见部分的数据。 更精确的变更通知。在 2.x 中，通过 Vue.set 强制添加新属性将导致依赖于该对象的 watcher 收到变更通知。在 3.x 中，只有依赖于特定属性的 watcher 才会收到通知。 不可变的 observable：我们可以创建值的“不可变”版本（即使是嵌套属性），除非系统在内部暂时将其“解禁”。这个机制可用于冻结 prop 传递或 Vuex 状态树以外的变化。 更好的调试功能：我们可以使用新的 renderTracked 和 renderTriggered 钩子精确地跟踪组件在什么时候以及为什么重新渲染。 （2）模板 模板方面没有大的变更，只改了作用域插槽，2.x 的机制导致作用域插槽变了，父组件会重新渲染，而 3.0 把作用域插槽改成了函数的方式，这样只会影响子组件的重新渲染，提升了渲染的性能。 同时，对于 render 函数的方面，vue3.0 也会进行一系列更改来方便习惯直接使用 api 来生成 vdom 。 （3）对象式的组件声明方式 vue2.x 中的组件是通过声明的方式传入一系列 option，和 TypeScript 的结合需要通过一些装饰器的方式来做，虽然能实现功能，但是比较麻烦。3.0 修改了组件的声明方式，改成了类式的写法，这样使得和 TypeScript 的结合变得很容易。 此外，vue 的源码也改用了 TypeScript 来写。其实当代码的功能复杂之后，必须有一个静态类型系统来做一些辅助管理。现在 vue3.0 也全面改用 TypeScript 来重写了，更是使得对外暴露的 api 更容易结合 TypeScript。静态类型系统对于复杂代码的维护确实很有必要。 （4）其它方面的更改 vue3.0 的改变是全面的，上面只涉及到主要的 3 个方面，还有一些其他的更改： 支持自定义渲染器，从而使得 weex 可以通过自定义渲染器的方式来扩展，而不是直接 fork 源码来改的方式。 支持 Fragment（多个根节点）和 Protal（在 dom 其他部分渲染组建内容）组件，针对一些特殊的场景做了处理。 基于 treeshaking 优化，提供了更多的内置功能。","tags":[]},{"title":"Vue代理proxyTable设置","date":"2019-12-26T09:40:01.198Z","path":"2019/12/26/Vue代理proxyTable设置/","text":"Vue 代理 proxyTable 设置背景：vue项目在本地开发默认打开localhost:8081，但是后端请求地址和本地产生跨域，怎样快速的在本地进行调接口调试？vue-cli自带的proxyTable 可以解决本地开发跨域问题 我们在项目中的后端路由，都带有 /server/ 的prefix 那么我们在config里配置 proxyTable 可以这样写： 123456789proxyTable: &#123; &#39;&#x2F;server&#39;: &#123; target: &#39;http:&#x2F;&#x2F;后端地址:7002&#39;, changeOrigin: true, pathRewrite: &#123; &#39;&#x2F;server&#39;: &#39;&#x2F;server&#x2F;&#39; &#125; &#125; &#125;, 这样本地就可以调用后端的接口进行调试了，记住，改完config文件要重新npm run dev ps：此方法仅限用于开发环境，不适合生产环境，生产环境可以用nginx进行代理","tags":[]},{"title":"JavaScript执行机制","date":"2019-12-26T09:35:01.855Z","path":"2019/12/26/JavaScript执行机制/","text":"1.关于javascriptjavascript是一门单线程语言，在最新的HTML5中提出了Web-Worker，但javascript是单线程这一核心仍未改变。所以一切javascript版的”多线程”都是用单线程模拟出来的，一切javascript多线程都是纸老虎！ 2.javascript事件循环既然js是单线程，那就像只有一个窗口的银行，客户需要排队一个一个办理业务，同理js任务也要一个一个顺序执行。如果一个任务耗时过长，那么后一个任务也必须等着。那么问题来了，假如我们想浏览新闻，但是新闻包含的超清图片加载很慢，难道我们的网页要一直卡着直到图片完全显示出来？因此聪明的程序员将任务分为两类： 同步任务 异步任务 当我们打开网站时，网页的渲染过程就是一大堆同步任务，比如页面骨架和页面元素的渲染。而像加载图片音乐之类占用资源大耗时久的任务，就是异步任务。关于这部分有严格的文字定义，但本文的目的是用最小的学习成本彻底弄懂执行机制，所以我们用导图来说明： 导图要表达的内容用文字来表述的话： 同步和异步任务分别进入不同的执行”场所”，同步的进入主线程，异步的进入Event Table并注册函数。 当指定的事情完成时，Event Table会将这个函数移入Event Queue。 主线程内的任务执行完毕为空，会去Event Queue读取对应的函数，进入主线程执行。 上述过程会不断重复，也就是常说的Event Loop(事件循环)。 我们不禁要问了，那怎么知道主线程执行栈为空啊？js引擎存在monitoring process进程，会持续不断的检查主线程执行栈是否为空，一旦为空，就会去Event Queue那里检查是否有等待被调用的函数。 说了这么多文字，不如直接一段代码更直白： 123456789let data &#x3D; [];$.ajax(&#123; url:www.javascript.com, data:data, success:() &#x3D;&gt; &#123; console.log(&#39;发送成功!&#39;); &#125;&#125;)console.log(&#39;代码执行结束&#39;); 上面是一段简易的ajax请求代码： ajax进入Event Table，注册回调函数success。 执行console.log(&#39;代码执行结束&#39;)。 ajax事件完成，回调函数success进入Event Queue。 主线程从Event Queue读取回调函数success并执行。 相信通过上面的文字和代码，你已经对js的执行顺序有了初步了解。接下来我们来研究进阶话题：setTimeout。 3.又爱又恨的setTimeout大名鼎鼎的setTimeout无需再多言，大家对他的第一印象就是异步可以延时执行，我们经常这么实现延时3秒执行： 123setTimeout(() &#x3D;&gt; &#123; console.log(&#39;延时3秒&#39;);&#125;,3000) 渐渐的setTimeout用的地方多了，问题也出现了，有时候明明写的延时3秒，实际却5，6秒才执行函数，这又咋回事啊？ 先看一个例子： 1234setTimeout(() &#x3D;&gt; &#123; task();&#125;,3000)console.log(&#39;执行console&#39;); 根据前面我们的结论，setTimeout是异步的，应该先执行console.log这个同步任务，所以我们的结论是： 12&#x2F;&#x2F;执行console&#x2F;&#x2F;task() 去验证一下，结果正确！然后我们修改一下前面的代码： 12345setTimeout(() &#x3D;&gt; &#123; task()&#125;,3000)sleep(10000000) 乍一看其实差不多嘛，但我们把这段代码在chrome执行一下，却发现控制台执行task()需要的时间远远超过3秒，说好的延时三秒，为啥现在需要这么长时间啊？ 这时候我们需要重新理解setTimeout的定义。我们先说上述代码是怎么执行的： task()进入Event Table并注册,计时开始。 执行sleep函数，很慢，非常慢，计时仍在继续。 3秒到了，计时事件timeout完成，task()进入Event Queue，但是sleep也太慢了吧，还没执行完，只好等着。 sleep终于执行完了，task()终于从Event Queue进入了主线程执行。 上述的流程走完，我们知道setTimeout这个函数，是经过指定时间后，把要执行的任务(本例中为task())加入到Event Queue中，又因为是单线程任务要一个一个执行，如果前面的任务需要的时间太久，那么只能等着，导致真正的延迟时间远远大于3秒。 我们还经常遇到setTimeout(fn,0)这样的代码，0秒后执行又是什么意思呢？是不是可以立即执行呢？ 答案是不会的，setTimeout(fn,0)的含义是，指定某个任务在主线程最早可得的空闲时间执行，意思就是不用再等多少秒了，只要主线程执行栈内的同步任务全部执行完成，栈为空就马上执行。举例说明： 12345678910&#x2F;&#x2F;代码1console.log(&#39;先执行这里&#39;);setTimeout(() &#x3D;&gt; &#123; console.log(&#39;执行啦&#39;)&#125;,0);&#x2F;&#x2F;代码2console.log(&#39;先执行这里&#39;);setTimeout(() &#x3D;&gt; &#123; console.log(&#39;执行啦&#39;)&#125;,3000); 代码1的输出结果是： 12&#x2F;&#x2F;先执行这里&#x2F;&#x2F;执行啦 代码2的输出结果是： 123&#x2F;&#x2F;先执行这里&#x2F;&#x2F; ... 3s later&#x2F;&#x2F; 执行啦 关于setTimeout要补充的是，即便主线程为空，0毫秒实际上也是达不到的。根据HTML的标准，最低是4毫秒。有兴趣的同学可以自行了解。 4.又恨又爱的setInterval上面说完了setTimeout，当然不能错过它的孪生兄弟setInterval。他俩差不多，只不过后者是循环的执行。对于执行顺序来说，setInterval会每隔指定的时间将注册的函数置入Event Queue，如果前面的任务耗时太久，那么同样需要等待。 唯一需要注意的一点是，对于setInterval(fn,ms)来说，我们已经知道不是每过ms秒会执行一次fn，而是每过ms秒，会有fn进入Event Queue。一旦setInterval的回调函数fn执行时间超过了延迟时间ms，那么就完全看不出来有时间间隔了。这句话请读者仔细品味。 5.Promise与process.nextTick(callback)传统的定时器我们已经研究过了，接着我们探究Promise与process.nextTick(callback)的表现。 Promise的定义和功能本文不再赘述，不了解的读者可以学习一下阮一峰老师的Promise。而process.nextTick(callback)类似node.js版的”setTimeout”，在事件循环的下一次循环中调用 callback 回调函数。 我们进入正题，除了广义的同步任务和异步任务，我们对任务有更精细的定义： macro-task(宏任务)：包括整体代码script，setTimeout，setInterval micro-task(微任务)：Promise，process.nextTick 不同类型的任务会进入对应的Event Queue，比如setTimeout和setInterval会进入相同的Event Queue。 事件循环的顺序，决定js代码的执行顺序。进入整体代码(宏任务)后，开始第一次循环。接着执行所有的微任务。然后再次从宏任务开始，找到其中一个任务队列执行完毕，再执行所有的微任务。听起来有点绕，我们用文章最开始的一段代码说明： 1234567891011setTimeout(function() &#123; console.log(&#39;setTimeout&#39;);&#125;)new Promise(function(resolve) &#123; console.log(&#39;promise&#39;);&#125;).then(function() &#123; console.log(&#39;then&#39;);&#125;)console.log(&#39;console&#39;); 这段代码作为宏任务，进入主线程。 先遇到setTimeout，那么将其回调函数注册后分发到宏任务Event Queue。(注册过程与上同，下文不再描述) 接下来遇到了Promise，new Promise立即执行，then函数分发到微任务Event Queue。 遇到console.log()，立即执行。 好啦，整体代码script作为第一个宏任务执行结束，看看有哪些微任务？我们发现了then在微任务Event Queue里面，执行。 ok，第一轮事件循环结束了，我们开始第二轮循环，当然要从宏任务Event Queue开始。我们发现了宏任务Event Queue中setTimeout对应的回调函数，立即执行。 结束。 事件循环，宏任务，微任务的关系如图所示： 我们来分析一段较复杂的代码，看看你是否真的掌握了js的执行机制： 123456789101112131415161718192021222324252627282930313233343536console.log(&#39;1&#39;);setTimeout(function() &#123; console.log(&#39;2&#39;); process.nextTick(function() &#123; console.log(&#39;3&#39;); &#125;) new Promise(function(resolve) &#123; console.log(&#39;4&#39;); resolve(); &#125;).then(function() &#123; console.log(&#39;5&#39;) &#125;)&#125;)process.nextTick(function() &#123; console.log(&#39;6&#39;);&#125;)new Promise(function(resolve) &#123; console.log(&#39;7&#39;); resolve();&#125;).then(function() &#123; console.log(&#39;8&#39;)&#125;)setTimeout(function() &#123; console.log(&#39;9&#39;); process.nextTick(function() &#123; console.log(&#39;10&#39;); &#125;) new Promise(function(resolve) &#123; console.log(&#39;11&#39;); resolve(); &#125;).then(function() &#123; console.log(&#39;12&#39;) &#125;)&#125;) 第一轮事件循环流程分析如下： 整体script作为第一个宏任务进入主线程，遇到console.log，输出1。 遇到setTimeout，其回调函数被分发到宏任务Event Queue中。我们暂且记为setTimeout1。 遇到process.nextTick()，其回调函数被分发到微任务Event Queue中。我们记为process1。 遇到Promise，new Promise直接执行，输出7。then被分发到微任务Event Queue中。我们记为then1。 又遇到了setTimeout，其回调函数被分发到宏任务Event Queue中，我们记为setTimeout2。 宏任务Event Queue 微任务Event Queue setTimeout1 process1 setTimeout2 then1 上表是第一轮事件循环宏任务结束时各Event Queue的情况，此时已经输出了1和7。 我们发现了process1和then1两个微任务。 执行process1,输出6。 执行then1，输出8。 好了，第一轮事件循环正式结束，这一轮的结果是输出1，7，6，8。那么第二轮时间循环从setTimeout1宏任务开始： 首先输出2。接下来遇到了process.nextTick()，同样将其分发到微任务Event Queue中，记为process2。new Promise立即执行输出4，then也分发到微任务Event Queue中，记为then2。 宏任务Event Queue 微任务Event Queue setTimeout2 process2 then2 第二轮事件循环宏任务结束，我们发现有process2和then2两个微任务可以执行。 输出3。 输出5。 第二轮事件循环结束，第二轮输出2，4，3，5。 第三轮事件循环开始，此时只剩setTimeout2了，执行。 直接输出9。 将process.nextTick()分发到微任务Event Queue中。记为process3。 直接执行new Promise，输出11。 将then分发到微任务Event Queue中，记为then3。 宏任务Event Queue 微任务Event Queue process3 then3 第三轮事件循环宏任务执行结束，执行两个微任务process3和then3。 输出10。 输出12。 第三轮事件循环结束，第三轮输出9，11，10，12。 整段代码，共进行了三次事件循环，完整的输出为1，7，6，8，2，4，3，5，9，11，10，12。(请注意，node环境下的事件监听依赖libuv与前端环境不完全相同，输出顺序可能会有误差) 6.写在最后(1)js的异步我们从最开头就说javascript是一门单线程语言，不管是什么新框架新语法糖实现的所谓异步，其实都是用同步的方法去模拟的，牢牢把握住单线程这点非常重要。 (2)事件循环Event Loop事件循环是js实现异步的一种方法，也是js的执行机制。 (3)javascript的执行和运行执行和运行有很大的区别，javascript在不同的环境下，比如node，浏览器，Ringo等等，执行方式是不同的。而运行大多指javascript解析引擎，是统一的。 (4)setImmediate微任务和宏任务还有很多种类，比如setImmediate等等，执行都是有共同点的，有兴趣的同学可以自行了解。 (5)最后的最后 javascript是一门单线程语言 Event Loop是javascript的执行机制","tags":[]},{"title":"项目常用JS方法封装","date":"2019-12-26T09:27:13.336Z","path":"2019/12/26/项目常用JS方法封装/","text":"001.输入一个值,返回其数据类型1234type &#x3D; para &#x3D;&gt; &#123; return Object.prototype.toString.call(para).slice(8,-1) &#125;qwe 002.冒泡排序升序 bubbleAsSort() 12345678910111213bubbleAsSort &#x3D; arr &#x3D;&gt; &#123; for (let i &#x3D; 0; i &lt; arr.length - 1; i++) &#123; for (let j &#x3D; 0; j &lt; arr.length - 1 - i; j++) &#123; if (arr[j] &gt; arr[j + 1]) &#123; let temp &#x3D; arr[j + 1]; arr[j + 1] &#x3D; arr[j]; arr[j] &#x3D; temp; &#125; &#125; &#125; return arr;&#125;qwe 降序 bubbleDeSort() 12345678910111213bubbleDeSort &#x3D; arr &#x3D;&gt; &#123; for (let i &#x3D; 0; i &lt; arr.length - 1; i++) &#123; for (let j &#x3D; 0; j &lt; arr.length - 1 - i; j++) &#123; if (arr[j] &lt; arr[j + 1]) &#123; let temp &#x3D; arr[j + 1]; arr[j + 1] &#x3D; arr[j]; arr[j] &#x3D; temp; &#125; &#125; &#125; return arr;&#125;qwe 003.选择排序升序 selectAsSort() 12345678910111213141516selectAsSort &#x3D; arr &#x3D;&gt; &#123; let minIndex, temp; for (let i &#x3D; 0; i &lt; arr.length - 1; i++) &#123; minIndex &#x3D; i; for (let j &#x3D; i + 1; j &lt; arr.length; j++) &#123; if (arr[j] &lt; arr[minIndex]) &#123; minIndex &#x3D; j; &#125; &#125; temp &#x3D; arr[i]; arr[i] &#x3D; arr[minIndex]; arr[minIndex] &#x3D; temp; &#125; return arr;&#125;qwe 降序 selectDeSort() 12345678910111213141516selectDeSort &#x3D; arr &#x3D;&gt; &#123; let minIndex, temp; for (let i &#x3D; 0; i &lt; arr.length - 1; i++) &#123; minIndex &#x3D; i; for (let j &#x3D; i + 1; j &lt; arr.length; j++) &#123; if (arr[j] &gt; arr[minIndex]) &#123; minIndex &#x3D; j; &#125; &#125; temp &#x3D; arr[i]; arr[i] &#x3D; arr[minIndex]; arr[minIndex] &#x3D; temp; &#125; return arr;&#125;qwe 004.插入排序升序 insertAsSort() 1234567891011121314insertAsSort &#x3D; arr &#x3D;&gt; &#123; let current, preIndex; for (let i &#x3D; 1; i &lt; arr.length; i++) &#123; current &#x3D; arr[i]; preIndex &#x3D; i - 1; while (preIndex &gt;&#x3D; 0 &amp;&amp; arr[preIndex] &gt; current) &#123; arr[preIndex + 1] &#x3D; arr[preIndex]; preIndex--; &#125; arr[preIndex + 1] &#x3D; current; &#125; return arr;&#125;qwe 降序 insertDeSort() 1234567891011121314insertDeSort &#x3D; arr &#x3D;&gt; &#123; let current, preIndex; for (let i &#x3D; 1; i &lt; arr.length; i++) &#123; current &#x3D; arr[i]; preIndex &#x3D; i - 1; while (preIndex &gt;&#x3D; 0 &amp;&amp; arr[preIndex] &lt; current) &#123; arr[preIndex + 1] &#x3D; arr[preIndex]; preIndex--; &#125; arr[preIndex + 1] &#x3D; current; &#125; return arr;&#125;qwe 005.阶乘12345678factorial &#x3D; num &#x3D;&gt; &#123; let count &#x3D; 1; for (let i &#x3D; 1; i &lt;&#x3D; num; i++) &#123; count *&#x3D; i; &#125; return count;&#125;qwe 006.两个数之间累乘12345678910111213141516multBetride &#x3D; (x, y) &#x3D;&gt; &#123; let count; if (x &lt; y) &#123; count &#x3D; x; for (let i &#x3D; x + 1; i &lt;&#x3D; y; i++) &#123; count *&#x3D; i; &#125; return count; &#125; else &#123; count &#x3D; y; for (let i &#x3D; y + 1; i &lt;&#x3D; x; i++) &#123; count *&#x3D; i; &#125; return count; &#125;&#125; 007.累加（）里面可以放N个实参 1234567function cumsum() &#123; let sum &#x3D; 0; for (let i &#x3D; 0; i &lt; arguments.length; i++) &#123; sum +&#x3D; arguments[i]; &#125; return sum;&#125; 008.计时器(计算代码块(函数)执行时间)无参 computeTime(f) 1234567computeTime &#x3D; code &#x3D;&gt; &#123; let startTime &#x3D; new Date().getTime(); code(); let endTime &#x3D; new Date().getTime(); let time &#x3D; endTime - startTime; return time;&#125; 有参 computeTime(f) 使用方法:computeTime(f,参数1,参数2……) 1234567891011computeTime &#x3D; f &#x3D;&gt; &#123; let startTime &#x3D; new Date().getTime(); let p &#x3D; []; for (let i &#x3D; 1; i &lt; arguments.length; i++) &#123; p.push(arguments[i]) &#125; f.apply(null, p) let endTime &#x3D; new Date().getTime(); let Time &#x3D; endTime - startTime; return Time;&#125; 009.数组去重12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152arrDemp1 &#x3D; arr &#x3D;&gt; &#123; let newArr &#x3D; []; let m &#x3D; &#123;&#125;; for (let i &#x3D; 0; i &lt; arr.length; i++) &#123; let n &#x3D; arr[i]; if (m[n]) &#123; &#125; else &#123; newArr.push(arr[i]); m[n] &#x3D; true; &#125; &#125; return newArr;&#125;&#x2F;&#x2F;遍历数组法arrDemp2 &#x3D; arr &#x3D;&gt; &#123; let temp &#x3D; []; for (let i &#x3D; 0; i &lt; arr.length; i++) &#123; &#x2F;&#x2F;indexOf()方法可返回某个指定的字符串或数组值在字符串或数组中首次出现的位置，若不在其中则返回-1 if (temp.indexOf(arr[i]) &#x3D;&#x3D;&#x3D; -1) temp.push(arr[i]); &#125; return temp;&#125;&#x2F;&#x2F;排序法arrDemp3 &#x3D; arr &#x3D;&gt; &#123; let temp &#x3D; []; arr.sort(); temp.push(arr[0]); &#x2F;&#x2F;因为数组已经经过排序，所以重复元素一定相邻，判断当前数组第i个元素与temp的最后一个元素是否相等，不相等时才复制元素 for (let i &#x3D; 1; i &lt; arr.length; i++) &#123; if (arr[i] !&#x3D; temp[temp.length - 1]) temp.push(arr[i]); &#125; return temp;&#125;&#x2F;&#x2F;对象法arrDemp4 &#x3D; arr &#x3D;&gt; &#123; let temp &#x3D; []; let json &#x3D; &#123;&#125;; &#x2F;&#x2F;将当前数组的元素值当作对象的属性，遍历数组，比对对象，如果对象的这个属性不存在则将当前数组元素复制到临时数组，并添加该属性且将属性值赋值为1 for (let i &#x3D; 0; i &lt; arr.length; i++) &#123; if (!json[arr[i]]) &#123;&#x2F;&#x2F;如果对象没有该属性 temp.push(arr[i]); json[arr[i]] &#x3D; 1;&#x2F;&#x2F;添加属性，将属性值赋值为1 &#125; &#125; return temp;&#125; 也可以使用ES6中的new Set，一步到位 1234let arr &#x3D; [1,2,3,5,4,5,4,3,6]let arrDemp &#x3D; new Set(arr) &#x2F;&#x2F;arrDemp是一个对象let newArr &#x3D; [...arrDemp] &#x2F;&#x2F;把arrDemp转化成数组console.log(newArr); 010.数组对象去重将对象数组中属性相同的项去重 1234567891011121314151617181920212223242526272829303132333435&#x2F;** objArr 对象数组* para 将要进行去重的字段(String类型)*&#x2F;测试数据：let objArr &#x3D; [&#123; name: &#39;a&#39;, age: 1 &#125;, &#123; name: &#39;a&#39;, age: 2 &#125;, &#123; name: &#39;b&#39;, age: 2 &#125;]console.log(objArrDemp1(objArr,&#39;name&#39;)); &#x2F;&#x2F; [ &#123; name: &#39;a&#39;, age: 1 &#125;, &#123; name: &#39;b&#39;, age: 2 &#125; ]console.log(objArrDemp1(objArr,&#39;age&#39;)); &#x2F;&#x2F; [ &#123; name: &#39;a&#39;, age: 1 &#125;, &#123; name: &#39;a&#39;, age: 2 &#125; ]objArrDemp1 &#x3D; (objArr, para) &#x3D;&gt; &#123; let result &#x3D; []; let temp &#x3D; &#123;&#125;; for (let i &#x3D; 0; i &lt; objArr.length; i++) &#123; let parameter &#x3D; objArr[i][para]; if (temp[parameter]) &#123; continue;&#x2F;&#x2F;不继续执行接下来的代码，跳转至循环开头 &#125; temp[parameter] &#x3D; true;&#x2F;&#x2F;为temp添加此属性（parameter）且将其值赋为true result.push(objArr[i]);&#x2F;&#x2F;将这一项复制到结果数组result中去 &#125; return result;&#125;objArrDemp2 &#x3D; (objArr, para) &#x3D;&gt; &#123; let hash &#x3D; &#123;&#125;; &#x2F;&#x2F;reduce方法有两个参数，第一个参数是一个callback，用于针对数组项的操作；第二个参数则是传入的初始值，这个初始值用于单个数组项的操作。 objArr &#x3D; objArr.reduce(function (item, next) &#123;&#x2F;&#x2F;这是针对数组项操作的函数，对于每个数组项，reduce方法都会将其调用一次 hash[next[para]] ? &#39;&#39; : hash[next[para]] &#x3D; true &amp;&amp; item.push(next); return item; &#125;, []);&#x2F;&#x2F;初始值是一个空对象，使用reduce方法返回的是空对象通过叠加执行之后的结果 return objArr;&#125; 011.统计数组中各个元素出现的次数12345678910111213141516staArrNum &#x3D; arr &#x3D;&gt; &#123; let obj &#x3D; &#123;&#125;; for (let i &#x3D; 0; i &lt; arr.length; i++) &#123; let m &#x3D; arr[i]; if (obj.hasOwnProperty(m)) &#123; obj[m] +&#x3D; 1; &#125; else &#123; obj[m] &#x3D; 1; &#125; &#125; return obj;&#125;let arr &#x3D; [1, 2, 3, 6, 5, 3, 2, 1, 2, 3, 2, 1]console.log(staArrNum(arr)); &#x2F;&#x2F; &#123; &#39;1&#39;: 3, &#39;2&#39;: 4, &#39;3&#39;: 3, &#39;5&#39;: 1, &#39;6&#39;: 1 &#125; 012.在数组中找指定的元素,返回下标12345678910111213arrFinNum &#x3D; function (arr,num) &#123; let index &#x3D; -1; for (let i &#x3D; 0; i &lt; arr.length; i++) &#123; if (num &#x3D;&#x3D; arr[i]) &#123; index &#x3D; i; break; &#125; &#125; return index;&#125;let arr &#x3D; [1,2,3,4,5,6]console.log(arrFinNum(arr,4)); &#x2F;&#x2F; 3 013.删除数组中的元素123456delArrNum &#x3D; (arr,val) &#x3D;&gt; &#123; let index &#x3D; arrFinNum(arr, val) &#x2F;&#x2F;调用了前面自行添加的arrFinNum方法 if (index !&#x3D; -1) &#123; return arr.splice(index, 1); &#125;&#125; 示例 123456789101112131415161718192021let arr &#x3D; [1, 2, 3, 4, 5, 6]arrFinNum &#x3D; (arr, num) &#x3D;&gt; &#123; let index &#x3D; -1; for (let i &#x3D; 0; i &lt; arr.length; i++) &#123; if (num &#x3D;&#x3D; arr[i]) &#123; index &#x3D; i; break; &#125; &#125; return index;&#125;delArrNum &#x3D; (arr,val) &#x3D;&gt; &#123; let index &#x3D; arrFinNum(arr, val) &#x2F;&#x2F;调用了前面自行添加的arrFinNum方法 if (index !&#x3D; -1) &#123; return arr.splice(index, 1); &#125;&#125;console.log(delArrNum(arr,2)); &#x2F;&#x2F; [ 2 ] 014.数字超过9显示省略号12345678num_filter &#x3D; val &#x3D;&gt;&#123; val &#x3D; val?val-0:0; if (val &gt; 9 ) &#123; return &quot;…&quot; &#125;else&#123; return val; &#125;&#125; 015.数字超过99显示99+12345678ninenum_filter &#x3D; val &#x3D;&gt;&#123; val &#x3D; val?val-0:0; if (val &gt; 99 ) &#123; return &quot;99+&quot; &#125;else&#123; return val; &#125;&#125; 016.银行卡号分割12345bank_filter &#x3D; val &#x3D;&gt;&#123; val +&#x3D; &#39;&#39;; val &#x3D; val.replace(&#x2F;(\\s)&#x2F;g,&#39;&#39;).replace(&#x2F;(\\d&#123;4&#125;)&#x2F;g,&#39;$1 &#39;).replace(&#x2F;\\s*$&#x2F;,&#39;&#39;); return val;&#125; 017.二分查找1234567891011121314151617181920212223242526272829303132333435363738&#x2F;&#x2F;非递归实现binarySearch &#x3D; (arr, key) &#x3D;&gt; &#123; let high &#x3D; arr.length - 1, low &#x3D; 0; while (low &lt;&#x3D; high) &#123; let m &#x3D; Math.floor((high + low) &#x2F; 2); if (arr[m] &#x3D;&#x3D; key) &#123; return m; &#125; if (key &gt; arr[m]) &#123; low &#x3D; m + 1; &#125; else &#123; high &#x3D; m - 1; &#125; &#125; return false;&#125;let arr &#x3D; [-1, 1, 3, 4, 5, 8, 32, 234, 12, 42];console.log(binarySearch(arr, 4));&#x2F;&#x2F;递归实现binarySearch &#x3D; (arr, low, high, key) &#x3D;&gt; &#123; if (low &gt; high) &#123; return -1; &#125; let mid &#x3D; parseInt((high + low) &#x2F; 2); if (arr[mid] &#x3D;&#x3D; key) &#123; return mid; &#125; else if (arr[mid] &gt; key) &#123; high &#x3D; mid - 1; return binarySearch(arr, low, high, key); &#125; else if (arr[mid] &lt; key) &#123; low &#x3D; mid + 1; return binarySearch(arr, low, high, key); &#125;&#125;;let arr &#x3D; [-1, 1, 3, 4, 5, 8, 32, 234, 12, 42];console.log(binarySearch(arr, 0, 13, 5)); 018.防抖与节流123456789101112131415161718192021222324252627282930313233343536373839&#x2F;** * 函数防抖 (只执行最后一次点击) *&#x2F;Debounce &#x3D; (fn, t) &#x3D;&gt; &#123; let delay &#x3D; t || 500; let timer; return function () &#123; let args &#x3D; arguments; if(timer)&#123; clearTimeout(timer); &#125; timer &#x3D; setTimeout(() &#x3D;&gt; &#123; timer &#x3D; null; fn.apply(this, args); &#125;, delay); &#125;&#125;;&#x2F;* * 函数节流 *&#x2F;Throttle &#x3D; (fn, t) &#x3D;&gt; &#123; let last; let timer; let interval &#x3D; t || 500; return function () &#123; let args &#x3D; arguments; let now &#x3D; +new Date(); if (last &amp;&amp; now - last &lt; interval) &#123; clearTimeout(timer); timer &#x3D; setTimeout(() &#x3D;&gt; &#123; last &#x3D; now; fn.apply(this, args); &#125;, interval); &#125; else &#123; last &#x3D; now; fn.apply(this, args); &#125; &#125;&#125;; 019.深拷贝1234567891011121314151617181920212223242526272829deepClone &#x3D; source &#x3D;&gt; &#123; const targetObj &#x3D; source.constructor &#x3D;&#x3D;&#x3D; Array ? [] : &#123;&#125;; &#x2F;&#x2F; 判断复制的目标是数组还是对象 for (let keys in source) &#123; &#x2F;&#x2F; 遍历目标 if (source.hasOwnProperty(keys)) &#123; if (source[keys] &amp;&amp; typeof source[keys] &#x3D;&#x3D;&#x3D; &#39;object&#39;) &#123; &#x2F;&#x2F; 如果值是对象，就递归一下 targetObj[keys] &#x3D; source[keys].constructor &#x3D;&#x3D;&#x3D; Array ? [] : &#123;&#125;; targetObj[keys] &#x3D; deepClone(source[keys]); &#125; else &#123; &#x2F;&#x2F; 如果不是，就直接赋值 targetObj[keys] &#x3D; source[keys]; &#125; &#125; &#125; return targetObj;&#125;let str1 &#x3D; &#123; arr: [1, 2, 3], obj: &#123; key: &#39;value&#39; &#125;, fn: function () &#123; return 1; &#125;&#125;;let str3 &#x3D; deepClone(str1);console.log(str3 &#x3D;&#x3D;&#x3D; str1); &#x2F;&#x2F; falseconsole.log(str3.obj &#x3D;&#x3D;&#x3D; str1.obj); &#x2F;&#x2F; falseconsole.log(str3.fn &#x3D;&#x3D;&#x3D; str1.fn); &#x2F;&#x2F; true 020.获取视口尺寸需要在HTML文件中运行 1234567891011121314151617181920212223function getViewportOffset() &#123; if (window.innerWidth) &#123; return &#123; w: window.innerWidth, h: window.innerHeight &#125; &#125; else &#123; &#x2F;&#x2F; ie8及其以下 if (document.compatMode &#x3D;&#x3D;&#x3D; &quot;BackCompat&quot;) &#123; &#x2F;&#x2F; 怪异模式 return &#123; w: document.body.clientWidth, h: document.body.clientHeight &#125; &#125; else &#123; &#x2F;&#x2F; 标准模式 return &#123; w: document.documentElement.clientWidth, h: document.documentElement.clientHeight &#125; &#125; &#125;&#125; 021.数字前补零1234567891011121314151617181920212223242526272829303132333435363738394041424344&#x2F;*** num为你想要进行填充的数字* length为你想要的数字长度*&#x2F;&#x2F;&#x2F;迭代方式实现padding1&#x3D;(num, length)&#x3D;&gt; &#123; for(let len &#x3D; (num + &quot;&quot;).length; len &lt; length; len &#x3D; num.length) &#123; num &#x3D; &quot;0&quot; + num; &#125; return num;&#125;&#x2F;&#x2F;递归方式实现padding2&#x3D;(num, length) &#x3D;&gt;&#123; if((num + &quot;&quot;).length &gt;&#x3D; length) &#123; return num; &#125; return padding2(&quot;0&quot; + num, length)&#125;&#x2F;&#x2F;转为小数padding3&#x3D;(num, length)&#x3D;&gt; &#123; let decimal &#x3D; num &#x2F; Math.pow(10, length); &#x2F;&#x2F;toFixed指定保留几位小数 decimal &#x3D; decimal.toFixed(length) + &quot;&quot;; return decimal.substr(decimal.indexOf(&quot;.&quot;)+1);&#125;&#x2F;&#x2F;填充截取法padding4&#x3D;(num, length)&#x3D;&gt; &#123; &#x2F;&#x2F;这里用slice和substr均可 return (Array(length).join(&quot;0&quot;) + num).slice(-length);&#125;&#x2F;&#x2F;填充截取法padding5&#x3D;(num, length)&#x3D;&gt; &#123; let len &#x3D; (num + &quot;&quot;).length; let diff &#x3D; length+1 - len; if(diff &gt; 0) &#123; return Array(diff).join(&quot;0&quot;) + num; &#125; return num;&#125; 022.字符替换可以替换任意数字和符号 12345678910111213&#x2F;*** str 表示将要替换的字符串* l 表示你将要替换的字符* r 表示你想要替换的字符*&#x2F;transFormat &#x3D; (str, l, r) &#x3D;&gt; &#123; let reg &#x3D; new RegExp(l, &#39;g&#39;) &#x2F;&#x2F; g表示全部替换，默认替换第一个 str &#x3D; str.replace(reg, r) return str&#125;console.log(transFormat(&#39;2019-12-13&#39;, &#39;-&#39;, &#39;&#x2F;&#39;)); &#x2F;&#x2F; 2019&#x2F;12&#x2F;13console.log(transFormat(&#39;2019-12-13&#39;, &#39;-&#39;, &#39;&#39;)); &#x2F;&#x2F; 20191213 023.在字符串指定位置插入字符1234567891011&#x2F;*** character 原字符串（String）* site 要插入的字符的位置 （Number）* newStr 想要插入的字符 （String）*&#x2F;insertStr &#x3D; (character, site, newStr) &#x3D;&gt; &#123; return character.slice(0, site) + newStr + character.slice(site);&#125;console.log(insertStr(&#39;20191217&#39;,4,&#39;-&#39;)); &#x2F;&#x2F; 2019-1217 024.字符串反转处理分割123456789101112&#x2F;*** str 是你将要进行处理的字符串(String)* under 是你根据什么字符处理(String)* event 是你根据什么字符把处理结果分割(String)*&#x2F;keyCharacterMap &#x3D; (str,under,event) &#x3D;&gt; &#123; return str.split(under).reverse().join(event)&#125;console.log(keyCharacterMap(&#39;hello world&#39;,&#39;&#39;,&#39;&#39;)); &#x2F;&#x2F; dlrow ollehconsole.log(keyCharacterMap(&#39;hello world&#39;,&#39; &#39;,&#39;-&#39;)); &#x2F;&#x2F; world-hello 025.格式转换：base64转file1234567891011121314151617&#x2F;*** base64 base64* filename 转换后的文件名*&#x2F;base64ToFile &#x3D; (base64, filename) &#x3D;&gt; &#123; let arr &#x3D; base64.split(&quot;,&quot;), mime &#x3D; arr[0].match(&#x2F;:(.*?);&#x2F;)[1], bstr &#x3D; atob(arr[1]), n &#x3D; bstr.length, u8arr &#x3D; new Uint8Array(n); while (n--) &#123; u8arr[n] &#x3D; bstr.charCodeAt(n); &#125; return new File([u8arr], filename, &#123; type: mime &#125;);&#125; 026.格式转换：base64转blob1234567891011base64ToBlob &#x3D; base64 &#x3D;&gt; &#123; let arr &#x3D; base64.split(&#39;,&#39;), mime &#x3D; arr[0].match(&#x2F;:(.*?);&#x2F;)[1], bstr &#x3D; atob(arr[1]), n &#x3D; bstr.length, u8arr &#x3D; new Uint8Array(n); while (n--) &#123; u8arr[n] &#x3D; bstr.charCodeAt(n); &#125; return new Blob([u8arr], &#123; type: mime &#125;);&#125;; 027.格式转换：blob转file12345blobToFile &#x3D; (blob, fileName) &#x3D;&gt; &#123; blob.lastModifiedDate &#x3D; new Date(); blob.name &#x3D; fileName; return blob;&#125;;","tags":[]},{"title":"css基础","date":"2019-12-26T09:18:59.966Z","path":"2019/12/26/css基础/","text":"一、CSS盒模型 CSS盒模型本质上是一个盒子，封装周围的HTML元素，它包括：边距margin，边框border，填充padding，和实际内容content。盒模型允许我们在其它元素和周围元素边框之间的空间放置元素。 box-sizing: content-box（W3C盒模型，又名标准盒模型）：元素的宽高大小表现为内容的大小。 box-sizing: border-box（IE盒模型，又名怪异盒模型）：元素的宽高表现为内容 + 内边距 + 边框的大小。背景会延伸到边框的外沿。 CSS3的新特性 word-wrap 文字换行 text-overflow 超过指定容器的边界时如何显示 text-decoration 文字渲染 text-shadow文字阴影 gradient渐变效果 transition过渡效果 transition-duration：过渡的持续时间 transform拉伸，压缩，旋转，偏移等变换 animation动画 transition和animation的区别： Animation和transition大部分属性是相同的，他们都是随时间改变元素的属性值，他们的主要区别是transition需要触发一个事件才能改变属性，而animation不需要触发任何事件的情况下才会随时间改变属性值，并且transition为2帧，从from …. to，而animation可以一帧一帧的。 CSS选择器及其优先级 !important 内联样式style=”” ID选择器#id 类选择器/属性选择器/伪类选择器.class.active[href=””] 元素选择器/关系选择器/伪元素选择器html+div&gt;span::after 通配符选择器* BFCBFC（Block Formatting Context）格式化上下文，是Web页面中盒模型布局的CSS渲染模式，指一个独立的渲染区域或者说是一个隔离的独立容器。 BFC应用 防止margin重叠 清除内部浮动 自适应两（多）栏布局 防止字体环绕 触发BFC条件 根元素 float的值不为none overflow的值不为visible display的值为inline-block、table-cell、table-caption position的值为absolute、fixed BFC的特性 内部的Box会在垂直方向上一个接一个的放置。 垂直方向上的距离由margin决定 bfc的区域不会与float的元素区域重叠。 计算bfc的高度时，浮动元素也参与计算 bfc就是页面上的一个独立容器，容器里面的子元素不会影响外面元素。 div水平居中 行内元素 1234.parent &#123; text-align: center;&#125;复制代码 块级元素 1234.son &#123; margin: 0 auto;&#125;复制代码 flex布局 12345.parent &#123; display: flex; justify-content: center;&#125;复制代码 绝对定位定宽 1234567.son &#123; position: absolute; width: 宽度; left: 50%; margin-left: -0.5*宽度&#125;复制代码 绝对定位不定宽 123456.son &#123; position: absolute; left: 50%; transform: translate(-50%, 0);&#125;复制代码 left/right: 0 12345678.son &#123; position: absolute; width: 宽度; left: 0; right: 0; margin: 0 auto;&#125;复制代码 div垂直居中 行内元素 1234567.parent &#123; height: 高度;&#125;.son &#123; line-height: 高度;&#125;复制代码 table 12345678.parent &#123; display: table;&#125;.son &#123; display: table-cell; vertical-align: middle;&#125;复制代码 flex 12345.parent &#123; display: flex; align-items: center;&#125;复制代码 绝对定位定高 1234567.son &#123; position: absolute; top: 50%; height: 高度; margin-top: -0.5高度;&#125;复制代码 绝对定位不定高 123456.son &#123; position: absolute; top: 50%; transform: translate( 0, -50%);&#125;复制代码 top/bottom: 0; 12345678.son &#123; position: absolute; height: 高度; top: 0; bottom: 0; margin: auto 0;&#125;复制代码 绝对定位和相对定位 absolute 绝对定位 相对于最近的已定位的祖先元素, 有已定位(指position不是static的元素)祖先元素, 以最近的祖先元素为参考标准。如果无已定位祖先元素, 以body元素为偏移参照基准, 完全脱离了标准文档流。 fixed 固定定位的元素会相对于视窗来定位,这意味着即便页面滚动，它还是会停留在相同的位置。一个固定定位元素不会保留它原本在页面应有的空隙。 共同点：改变行内元素的呈现方式，都脱离了文档流；不同点：absolute的”根元素“是可以设置的，fixed的“根元素”固定为浏览器窗口 flex布局采用 Flex 布局的元素，称为 Flex 容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称“项目”。 ![flex.jpeg](data:image/svg+xml;utf8,) 父元素属性 属性名 属性值 备注 display flex 定义了一个flex容器，它的直接子元素会接受这个flex环境 flex-direction row,row-reverse,column,column-reverse 决定主轴的方向 flex-wrap nowrap,wrap,wrap-reverse 如果一条轴线排不下，如何换行 flex-flow [flex-direction] , [flex-wrap] 是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap justify-content flex-start,flex-end,center,space-between,space-around 设置或检索弹性盒子元素在主轴（横轴）方向上的对齐方式 align-items flex-start,flex-end,center,baseline,stretch 设置或检索弹性盒子元素在侧轴（纵轴）方向上的对齐方式 子元素属性 属性名 属性值 备注 order [int] 默认情况下flex order会按照书写顺训呈现，可以通过order属性改变，数值小的在前面，还可以是负数。 flex-grow [number] 设置或检索弹性盒的扩展比率,根据弹性盒子元素所设置的扩展因子作为比率来分配剩余空间 flex-shrink [number] 设置或检索弹性盒的收缩比率,根据弹性盒子元素所设置的收缩因子作为比率来收缩空间 flex-basis [length], auto 设置或检索弹性盒伸缩基准值 align-self auto,flex-start,flex-end,center,baseline,stretch 设置或检索弹性盒子元素在侧轴（纵轴）方向上的对齐方式，可以覆盖父容器align-items的设置 让元素消失visibility:hidden、display:none、z-index=-1、opacity：0 opacity：0,该元素隐藏起来了，但不会改变页面布局，并且，如果该元素已经绑定了一些事件，如click事件也能触发 visibility:hidden,该元素隐藏起来了，但不会改变页面布局，但是不会触发该元素已经绑定的事件 display:none, 把元素隐藏起来，并且会改变页面布局，可以理解成在页面中把该元素删掉 z-index=-1置于其他元素下面 清除浮动 在浮动元素后面添加 clear:both 的空 div 元素， 123456&lt;div class&#x3D;&quot;container&quot;&gt; &lt;div class&#x3D;&quot;left&quot;&gt;&lt;&#x2F;div&gt; &lt;div class&#x3D;&quot;right&quot;&gt;&lt;&#x2F;div&gt; &lt;div style&#x3D;&quot;clear:both&quot;&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;复制代码 给父元素添加 overflow:hidden 或者 auto 样式，触发BFC。 123456789101112&lt;div class&#x3D;&quot;container&quot;&gt; &lt;div class&#x3D;&quot;left&quot;&gt;&lt;&#x2F;div&gt; &lt;div class&#x3D;&quot;right&quot;&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;复制代码.container&#123; width: 300px; background-color: #aaa; overflow:hidden; zoom:1; &#x2F;*IE6*&#x2F;&#125;复制代码 使用伪元素，也是在元素末尾添加一个点并带有 clear: both 属性的元素实现的。 12345678910111213141516&lt;div class&#x3D;&quot;container clearfix&quot;&gt; &lt;div class&#x3D;&quot;left&quot;&gt;&lt;&#x2F;div&gt; &lt;div class&#x3D;&quot;right&quot;&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;复制代码.clearfix&#123; zoom: 1; &#x2F;*IE6*&#x2F;&#125;.clearfix:after&#123; content: &quot;.&quot;; height: 0; clear: both; display: block; visibility: hidden;&#125;复制代码 推荐使用第三种方法，不会在页面新增div，文档结构更加清晰。 calc函数calc函数是css3新增的功能，可以使用calc()计算border、margin、pading、font-size和width等属性设置动态值。 12345678910#div1 &#123; position: absolute; left: 50px; width: calc( 100% &#x2F; (100px * 2) ); &#x2F;&#x2F;兼容写法 width: -moz-calc( 100% &#x2F; (100px * 2) ); width: -webkit-calc( 100% &#x2F; (100px * 2) ); border: 1px solid black;&#125;复制代码 注意点： 需要注意的是，运算符前后都需要保留一个空格，例如：width: calc(100% - 10px); calc()函数支持 “+”, “-“, “*”, “/“ 运算; 对于不支持 calc() 的浏览器，整个属性值表达式将被忽略。不过我们可以对那些不支持 calc()的浏览器，使用一个固定值作为回退。 移动端remrem官方定义『The font size of the root element』，即根元素的字体大小。rem是一个相对的CSS单位，1rem等于html元素上font-size的大小。所以，我们只要设置html上font-size的大小，就可以改变1rem所代表的大小。 123456789(function () &#123; var html &#x3D; document.documentElement; function onWindowResize() &#123; html.style.fontSize &#x3D; html.getBoundingClientRect().width &#x2F; 20 + &#39;px&#39;; &#125; window.addEventListener(&#39;resize&#39;, onWindowResize); onWindowResize();&#125;)();复制代码 移动端1px一般来说，在PC端浏览器中，设备像素比（dpr）等于1，1个css像素就代表1个物理像素；但是在retina屏幕中，dpr普遍是2或3，1个css像素不再等于1个物理像素，因此比实际设计稿看起来粗不少。 伪元素+scale 12345678910111213141516171819202122&lt;style&gt; .box&#123; width: 100%; height: 1px; margin: 20px 0; position: relative; &#125; .box::after&#123; content: &#39;&#39;; position: absolute; bottom: 0; width: 100%; height: 1px; transform: scaleY(0.5); transform-origin: 0 0; background: red; &#125;&lt;&#x2F;style&gt;&lt;div class&#x3D;&quot;box&quot;&gt;&lt;&#x2F;div&gt;复制代码 border-image 123456div&#123; border-width: 1px 0px; -webkit-border-image: url(border.png) 2 0 stretch; border-image: url(border.png) 2 0 stretch;&#125;复制代码 两边宽度固定中间自适应的三栏布局圣杯布局和双飞翼布局是前端工程师需要日常掌握的重要布局方式。两者的功能相同，都是为了实现一个两侧宽度固定，中间宽度自适应的三栏布局。 圣杯布局12345678910111213141516171819202122232425262728293031&lt;style&gt;body&#123; min-width: 550px;&#125;#container&#123; padding-left: 200px; padding-right: 150px;&#125;#container .column&#123; float: left;&#125;#center&#123; width: 100%;&#125;#left&#123; width: 200px; margin-left: -100%; position: relative; right: 200px;&#125;#right&#123; width: 150px; margin-right: -150px;&#125;&lt;&#x2F;style&gt;&lt;div id&#x3D;&quot;container&quot;&gt; &lt;div id&#x3D;&quot;center&quot; class&#x3D;&quot;column&quot;&gt;center&lt;&#x2F;div&gt; &lt;div id&#x3D;&quot;left&quot; class&#x3D;&quot;column&quot;&gt;left&lt;&#x2F;div&gt; &lt;div id&#x3D;&quot;right&quot; class&#x3D;&quot;column&quot;&gt;right&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;复制代码 双飞翼布局12345678910111213141516171819202122232425262728&lt;style&gt;body &#123; min-width: 500px;&#125;#container &#123; width: 100%;&#125;.column &#123; float: left;&#125;#center &#123; margin-left: 200px; margin-right: 150px;&#125;#left &#123; width: 200px; margin-left: -100%;&#125;#right &#123; width: 150px; margin-left: -150px;&#125;&lt;&#x2F;style&gt;&lt;div id&#x3D;&quot;container&quot; class&#x3D;&quot;column&quot;&gt; &lt;div id&#x3D;&quot;center&quot;&gt;center&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;div id&#x3D;&quot;left&quot; class&#x3D;&quot;column&quot;&gt;left&lt;&#x2F;div&gt;&lt;div id&#x3D;&quot;right&quot; class&#x3D;&quot;column&quot;&gt;right&lt;&#x2F;div&gt;","tags":[]}]